package de.unibielefeld.gi.kotte.laborprogramm.pathway.wizard;

import de.unibielefeld.gi.kotte.laborprogramm.pathway.utils.CancellableRunnable;
import de.unibielefeld.gi.kotte.laborprogramm.pathway.utils.MetacycController;
import de.unibielefeld.gi.kotte.laborprogramm.pathway.utils.NameTools;
import de.unibielefeld.gi.kotte.laborprogramm.pathway.utils.ResultListener;
import de.unibielefeld.gi.kotte.laborprogramm.pathway.utils.TypedListModel;
import de.unibielefeld.gi.omicsTools.biocyc.ptools.PGDB;
import java.awt.Cursor;
import java.io.File;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import javax.swing.JFileChooser;
import javax.swing.JPanel;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import org.netbeans.api.progress.ProgressHandle;
import org.netbeans.api.progress.ProgressHandleFactory;
import org.openide.filesystems.FileChooserBuilder;
import org.openide.util.RequestProcessor;

public final class SBMLIMportVisualPanel1 extends JPanel implements DocumentListener, ListSelectionListener {

    public static final String PROPERTY_PROJECT_NAME = "Pathway Project Name";
    public static final String PROPERTY_FILE = "SBML File";
    public static final String PROPERTY_ORGANISM = "PGDB";
    private TypedListModel<PGDB> organismListModel = new TypedListModel<PGDB>();
    private File file;

    /**
     * Creates new form SBMLIMportVisualPanel1
     */
    public SBMLIMportVisualPanel1() {
        initComponents();
        organismList.setEnabled(true);
        organismList.setModel(organismListModel);
        organismList.setCellRenderer(new PGDBCellRenderer());
        organismList.addListSelectionListener(this);
        nameTextField.getDocument().addDocumentListener(this);
        initOrganismList();
    }

    @Override
    public String getName() {
        return "Import SBML File";
    }

    public File getSBMLFile() {
        return file;
    }

    public PGDB getOrganism() {
        return (PGDB) organismList.getSelectedValue();
    }

    public String getProjectName() {
        return nameTextField.getText();
    }

    private void initOrganismList() {
        CancellableRunnable<List<PGDB>> cr = new CancellableRunnable<List<PGDB>>() {
            @Override
            public void body() {
                this.handle.progress("Querying database");
                organismList.setEnabled(false);
                organismList.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
                MetacycController mc = new MetacycController();
                List<PGDB> organisms = mc.getOrganisms();
                this.handle.progress("Sorting results");
                Collections.sort(organisms, new Comparator<PGDB>() {
                    @Override
                    public int compare(PGDB o1, PGDB o2) {
                        String name1 = NameTools.getSpeciesName(o1);
                        String name2 = NameTools.getSpeciesName(o2);
                        return name1.compareTo(name2);
                    }
                });
                this.handle.progress("Adding results to the list");
                notifyListeners(organisms);
            }
        };
        cr.addResultListener(new ResultListener<List<PGDB>>() {
            @Override
            public void listen(List<PGDB> organisms) {
                organismListModel.setList(organisms);
                organismList.setEnabled(true);
                organismList.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
            }
        });

        final ProgressHandle ph = ProgressHandleFactory.createHandle("Fetching organism list", cr);
        cr.setHandle(ph);
        RequestProcessor rp = new RequestProcessor(SBMLIMportVisualPanel1.class);
        rp.post(cr);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel1 = new javax.swing.JPanel();
        organismLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        organismList = new javax.swing.JList();
        jPanel2 = new javax.swing.JPanel();
        fileLabel = new javax.swing.JLabel();
        fileTextField = new javax.swing.JTextField();
        fileButton = new javax.swing.JButton();
        nameLabel = new javax.swing.JLabel();
        nameTextField = new javax.swing.JTextField();

        jSplitPane1.setDividerLocation(300);

        org.openide.awt.Mnemonics.setLocalizedText(organismLabel, org.openide.util.NbBundle.getMessage(SBMLIMportVisualPanel1.class, "SBMLIMportVisualPanel1.organismLabel.text")); // NOI18N

        organismList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(organismList);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 301, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(organismLabel))
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 310, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(organismLabel)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 263, Short.MAX_VALUE)
                    .addContainerGap()))
        );

        jSplitPane1.setLeftComponent(jPanel1);

        org.openide.awt.Mnemonics.setLocalizedText(fileLabel, org.openide.util.NbBundle.getMessage(SBMLIMportVisualPanel1.class, "SBMLIMportVisualPanel1.fileLabel.text")); // NOI18N

        fileTextField.setEditable(false);
        fileTextField.setColumns(50);
        fileTextField.setText(org.openide.util.NbBundle.getMessage(SBMLIMportVisualPanel1.class, "SBMLIMportVisualPanel1.fileTextField.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(fileButton, org.openide.util.NbBundle.getMessage(SBMLIMportVisualPanel1.class, "SBMLIMportVisualPanel1.fileButton.text")); // NOI18N
        fileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(nameLabel, org.openide.util.NbBundle.getMessage(SBMLIMportVisualPanel1.class, "SBMLIMportVisualPanel1.nameLabel.text")); // NOI18N

        nameTextField.setText(org.openide.util.NbBundle.getMessage(SBMLIMportVisualPanel1.class, "SBMLIMportVisualPanel1.nameTextField.text")); // NOI18N

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(181, 181, 181)
                .addComponent(fileButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel2Layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(fileLabel)
                        .addComponent(nameTextField)
                        .addComponent(nameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(fileTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                    .addContainerGap(112, Short.MAX_VALUE)))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(95, 95, 95)
                .addComponent(fileButton)
                .addContainerGap(186, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel2Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(nameLabel)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(nameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addComponent(fileLabel)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(fileTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(186, Short.MAX_VALUE)))
        );

        jSplitPane1.setRightComponent(jPanel2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 592, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void fileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileButtonActionPerformed
        FileChooserBuilder fcb = new FileChooserBuilder(getClass());
        fcb.setTitle("Choose SBML Document");
        JFileChooser jfc = fcb.createFileChooser();
        int status = jfc.showOpenDialog(this);
        if (status == JFileChooser.APPROVE_OPTION) {
            File oldFile = file;
            file = jfc.getSelectedFile();
            fileTextField.setText(file.getAbsolutePath());
            firePropertyChange(PROPERTY_FILE, oldFile, file);
        }
    }//GEN-LAST:event_fileButtonActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton fileButton;
    private javax.swing.JLabel fileLabel;
    private javax.swing.JTextField fileTextField;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JTextField nameTextField;
    private javax.swing.JLabel organismLabel;
    private javax.swing.JList organismList;
    // End of variables declaration//GEN-END:variables

    @Override
    public void insertUpdate(DocumentEvent e) {
//        updateTextField(e);
        firePropertyChange("textfield change", 0, 1);
    }

    @Override
    public void removeUpdate(DocumentEvent e) {
//        updateTextField(e);
        firePropertyChange("textfield change", 0, 1);
    }

    @Override
    public void changedUpdate(DocumentEvent e) {
//        updateTextField(e);
        firePropertyChange("textfield change", 0, 1);
    }
//    private void updateTextField(DocumentEvent e) {
//    }

    @Override
    public void valueChanged(ListSelectionEvent lse) {
        firePropertyChange("organism selection change", null, organismList.getSelectedValue());
    }
}
