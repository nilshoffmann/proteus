package de.unibielefeld.gi.kotte.laborprogramm.ImportWizard;

import java.io.File;
import javax.swing.JFileChooser;
import javax.swing.JPanel;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.filechooser.FileFilter;

/**
 * Visual Panel for the Project creation wizard.
 *
 * @author kotte
 */
public final class ImportVisualPanel1 extends JPanel implements DocumentListener {

    public static final String PROPERTY_BASE_DIRECTORY = "baseDirectory";
    public static final String PROPERTY_PROJECT_PARENT_DIRECTORY = "projectParentDirectory";
    public static final String PROPERTY_PROJECT_NAME = "projectName";
    public static final String PROPERTY_EXCEL_DATA_FILE = "excelData";
    private File baseDirectoryFile;
    private File projectParentDirectoryFile;
    private File excelDataFile;
    private File lastActiveDirectory = new File(".");

    public String getProjectName() {
        return projectNameTextField.getText();
    }

    public File getBaseDirectoryFile() {
        return baseDirectoryFile;
    }

    public File getProjectParentDirectoryFile() {
        return projectParentDirectoryFile;
    }

    public File getExcelDataFile() {
        return excelDataFile;
    }


    /** Creates new form ImportVisualPanel1 */
    public ImportVisualPanel1() {
        initComponents();
    }

    @Override
    public String getName() {
        return "Datei Import f√ºr neue Proteomik Projekte";
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        projectNameLabel = new javax.swing.JLabel();
        projectNameTextField = new javax.swing.JTextField();
        baseDirectoryLabel = new javax.swing.JLabel();
        baseDirectoryTextField = new javax.swing.JTextField();
        baseDirectoryButton = new javax.swing.JButton();
        projectDirectoryLabel = new javax.swing.JLabel();
        projectDirectoryTextField = new javax.swing.JTextField();
        separator = new javax.swing.JSeparator();
        projectParentDirectoryButton = new javax.swing.JButton();
        projectParentDirectoryTextField = new javax.swing.JTextField();
        projectParentDirectoryLabel = new javax.swing.JLabel();
        excelDataButton = new javax.swing.JButton();
        excelDataTextField = new javax.swing.JTextField();
        excelDataLabel = new javax.swing.JLabel();

        org.openide.awt.Mnemonics.setLocalizedText(projectNameLabel, org.openide.util.NbBundle.getMessage(ImportVisualPanel1.class, "ImportVisualPanel1.projectNameLabel.text")); // NOI18N

        projectNameTextField.setText(org.openide.util.NbBundle.getMessage(ImportVisualPanel1.class, "ImportVisualPanel1.projectNameTextField.text")); // NOI18N
        projectNameTextField.setPreferredSize(new java.awt.Dimension(200, 20));

        org.openide.awt.Mnemonics.setLocalizedText(baseDirectoryLabel, org.openide.util.NbBundle.getMessage(ImportVisualPanel1.class, "ImportVisualPanel1.baseDirectoryLabel.text")); // NOI18N

        baseDirectoryTextField.setText(org.openide.util.NbBundle.getMessage(ImportVisualPanel1.class, "ImportVisualPanel1.baseDirectoryTextField.text")); // NOI18N
        baseDirectoryTextField.setEnabled(false);

        org.openide.awt.Mnemonics.setLocalizedText(baseDirectoryButton, org.openide.util.NbBundle.getMessage(ImportVisualPanel1.class, "ImportVisualPanel1.baseDirectoryButton.text")); // NOI18N
        baseDirectoryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                baseDirectoryButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(projectDirectoryLabel, org.openide.util.NbBundle.getMessage(ImportVisualPanel1.class, "ImportVisualPanel1.projectDirectoryLabel.text")); // NOI18N

        projectDirectoryTextField.setText(org.openide.util.NbBundle.getMessage(ImportVisualPanel1.class, "ImportVisualPanel1.projectDirectoryTextField.text")); // NOI18N
        projectDirectoryTextField.setEnabled(false);

        org.openide.awt.Mnemonics.setLocalizedText(projectParentDirectoryButton, org.openide.util.NbBundle.getMessage(ImportVisualPanel1.class, "ImportVisualPanel1.projectParentDirectoryButton.text")); // NOI18N
        projectParentDirectoryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                projectParentDirectoryButtonActionPerformed(evt);
            }
        });

        projectParentDirectoryTextField.setText(org.openide.util.NbBundle.getMessage(ImportVisualPanel1.class, "ImportVisualPanel1.projectParentDirectoryTextField.text")); // NOI18N
        projectParentDirectoryTextField.setEnabled(false);

        org.openide.awt.Mnemonics.setLocalizedText(projectParentDirectoryLabel, org.openide.util.NbBundle.getMessage(ImportVisualPanel1.class, "ImportVisualPanel1.projectParentDirectoryLabel.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(excelDataButton, org.openide.util.NbBundle.getMessage(ImportVisualPanel1.class, "ImportVisualPanel1.excelDataButton.text")); // NOI18N
        excelDataButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                excelDataButtonActionPerformed(evt);
            }
        });

        excelDataTextField.setText(org.openide.util.NbBundle.getMessage(ImportVisualPanel1.class, "ImportVisualPanel1.excelDataTextField.text")); // NOI18N
        excelDataTextField.setEnabled(false);

        org.openide.awt.Mnemonics.setLocalizedText(excelDataLabel, org.openide.util.NbBundle.getMessage(ImportVisualPanel1.class, "ImportVisualPanel1.excelDataLabel.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(projectNameLabel)
                    .addComponent(projectParentDirectoryLabel)
                    .addComponent(projectDirectoryLabel)
                    .addComponent(separator, javax.swing.GroupLayout.DEFAULT_SIZE, 424, Short.MAX_VALUE)
                    .addComponent(baseDirectoryLabel)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(baseDirectoryTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 343, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(baseDirectoryButton))
                    .addComponent(excelDataLabel)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(excelDataTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 343, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(excelDataButton))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(projectNameTextField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 343, Short.MAX_VALUE)
                            .addComponent(projectDirectoryTextField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 343, Short.MAX_VALUE)
                            .addComponent(projectParentDirectoryTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 343, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(projectParentDirectoryButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(projectNameLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(projectNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(projectParentDirectoryLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(projectParentDirectoryTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(projectParentDirectoryButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(projectDirectoryLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(projectDirectoryTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(separator, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(baseDirectoryLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(baseDirectoryTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(baseDirectoryButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(excelDataLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(excelDataTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(excelDataButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        projectNameLabel.getAccessibleContext().setAccessibleName(org.openide.util.NbBundle.getMessage(ImportVisualPanel1.class, "ImportVisualPanel1.jLabel1.AccessibleContext.accessibleName")); // NOI18N
    }// </editor-fold>//GEN-END:initComponents

    private void baseDirectoryButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_baseDirectoryButtonActionPerformed
        JFileChooser jfc = new JFileChooser(lastActiveDirectory);
        //jfc.setCurrentDirectory(new java.io.File("."));
        jfc.setDialogTitle("Basisverzeichnis ausw√§hlen");
        jfc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        jfc.setAcceptAllFileFilterUsed(false);
        int status = jfc.showOpenDialog(null);
        if (status == JFileChooser.APPROVE_OPTION) {
            File oldFile = baseDirectoryFile;
            baseDirectoryFile = jfc.getSelectedFile();
            lastActiveDirectory = baseDirectoryFile;
            baseDirectoryTextField.setText(baseDirectoryFile.getAbsolutePath());
            firePropertyChange(PROPERTY_BASE_DIRECTORY, oldFile, baseDirectoryFile);
        }
    }//GEN-LAST:event_baseDirectoryButtonActionPerformed

    private void projectParentDirectoryButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_projectParentDirectoryButtonActionPerformed
        JFileChooser jfc = new JFileChooser(lastActiveDirectory);
        //jfc.setCurrentDirectory(new java.io.File("."));
        jfc.setDialogTitle("Verzeichnis f√ºr Projekt ausw√§hlen");
        jfc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        jfc.setAcceptAllFileFilterUsed(false);
        int status = jfc.showOpenDialog(null);
        if (status == JFileChooser.APPROVE_OPTION) {
            File oldFile = projectParentDirectoryFile;
            projectParentDirectoryFile = jfc.getSelectedFile();
            lastActiveDirectory = projectParentDirectoryFile;
            projectParentDirectoryTextField.setText(projectParentDirectoryFile.getAbsolutePath());
            projectDirectoryTextField.setText(projectParentDirectoryFile.getAbsolutePath() + File.separator + projectNameTextField.getText());
            firePropertyChange(PROPERTY_PROJECT_PARENT_DIRECTORY, oldFile, projectParentDirectoryFile);
        }
    }//GEN-LAST:event_projectParentDirectoryButtonActionPerformed

    private void excelDataButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_excelDataButtonActionPerformed
        JFileChooser jfc = new JFileChooser(lastActiveDirectory);
        //jfc.setCurrentDirectory(new java.io.File("."));
        FileFilter ff = new FileFilter() {

            @Override
            public boolean accept(File file) {
                if(file.isDirectory()) {
                    return true;
                }
                if(file.getName().toLowerCase().endsWith("xlsx")) {
                    return true;
                }
                return false;
            }

            @Override
            public String getDescription() {
                return ".xlsx";
            }
        };//"xlsx";
        jfc.setDialogTitle("Delta2d Excel Export ausw√§hlen");
        jfc.setFileFilter(ff);
        int status = jfc.showOpenDialog(null);
        if (status == JFileChooser.APPROVE_OPTION) {
            File oldFile = excelDataFile;
            excelDataFile = jfc.getSelectedFile();
            lastActiveDirectory = excelDataFile.getParentFile();
            excelDataTextField.setText(excelDataFile.getAbsolutePath());
            firePropertyChange(PROPERTY_EXCEL_DATA_FILE, oldFile, excelDataFile);
        }
    }//GEN-LAST:event_excelDataButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton baseDirectoryButton;
    private javax.swing.JLabel baseDirectoryLabel;
    private javax.swing.JTextField baseDirectoryTextField;
    private javax.swing.JButton excelDataButton;
    private javax.swing.JLabel excelDataLabel;
    private javax.swing.JTextField excelDataTextField;
    private javax.swing.JLabel projectDirectoryLabel;
    private javax.swing.JTextField projectDirectoryTextField;
    private javax.swing.JLabel projectNameLabel;
    private javax.swing.JTextField projectNameTextField;
    private javax.swing.JButton projectParentDirectoryButton;
    private javax.swing.JLabel projectParentDirectoryLabel;
    private javax.swing.JTextField projectParentDirectoryTextField;
    private javax.swing.JSeparator separator;
    // End of variables declaration//GEN-END:variables

    @Override
    public void insertUpdate(DocumentEvent e) {
        firePropertyChange("fileChange", 0, 1);
    }

    @Override
    public void removeUpdate(DocumentEvent e) {
        firePropertyChange("fileChange", 0, 1);
    }

    @Override
    public void changedUpdate(DocumentEvent e) {
        firePropertyChange("fileChange", 0, 1);
    }
}
