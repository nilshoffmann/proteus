package de.unibielefeld.gi.kotte.laborprogramm.pathway.options;

import java.awt.GridLayout;
import java.io.File;
import java.io.IOException;
import java.util.prefs.Preferences;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import org.openide.DialogDisplayer;
import org.openide.NotifyDescriptor;
import org.openide.filesystems.FileAlreadyLockedException;
import org.openide.filesystems.FileObject;
import org.openide.filesystems.FileUtil;
import org.openide.util.Exceptions;

final class PathwayManagerCachePanel extends JPanel implements DocumentListener {

    private final PathwayManagerCacheOptionsPanelController controller;

    PathwayManagerCachePanel(PathwayManagerCacheOptionsPanelController controller) {
        this.controller = controller;
        initComponents();
        cacheFileMaxAgeTextField.getDocument().addDocumentListener(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cacheDeleteLabel = new javax.swing.JLabel();
        deleteCacheButton = new javax.swing.JButton();
        oldCacheFilesCheckBox = new javax.swing.JCheckBox();
        cacheFileMaxAgeTextField = new javax.swing.JTextField();
        cacheAgeLabel = new javax.swing.JLabel();
        errorMessageLabel = new javax.swing.JLabel();

        org.openide.awt.Mnemonics.setLocalizedText(cacheDeleteLabel, org.openide.util.NbBundle.getMessage(PathwayManagerCachePanel.class, "PathwayManagerCachePanel.cacheDeleteLabel.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(deleteCacheButton, org.openide.util.NbBundle.getMessage(PathwayManagerCachePanel.class, "PathwayManagerCachePanel.deleteCacheButton.text")); // NOI18N
        deleteCacheButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteCacheButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(oldCacheFilesCheckBox, org.openide.util.NbBundle.getMessage(PathwayManagerCachePanel.class, "PathwayManagerCachePanel.oldCacheFilesCheckBox.text")); // NOI18N
        oldCacheFilesCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                oldCacheFilesCheckBoxActionPerformed(evt);
            }
        });

        cacheFileMaxAgeTextField.setText(org.openide.util.NbBundle.getMessage(PathwayManagerCachePanel.class, "PathwayManagerCachePanel.cacheFileMaxAgeTextField.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(cacheAgeLabel, org.openide.util.NbBundle.getMessage(PathwayManagerCachePanel.class, "PathwayManagerCachePanel.cacheAgeLabel.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(errorMessageLabel, org.openide.util.NbBundle.getMessage(PathwayManagerCachePanel.class, "PathwayManagerCachePanel.errorMessageLabel.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(oldCacheFilesCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cacheFileMaxAgeTextField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cacheAgeLabel))
                    .addComponent(cacheDeleteLabel)
                    .addComponent(deleteCacheButton)
                    .addComponent(errorMessageLabel))
                .addContainerGap(53, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(cacheDeleteLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(deleteCacheButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(oldCacheFilesCheckBox)
                    .addComponent(cacheFileMaxAgeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cacheAgeLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 53, Short.MAX_VALUE)
                .addComponent(errorMessageLabel)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void oldCacheFilesCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_oldCacheFilesCheckBoxActionPerformed
        controller.changed();
    }//GEN-LAST:event_oldCacheFilesCheckBoxActionPerformed

    private void deleteCacheButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteCacheButtonActionPerformed
        FileObject configFolder = FileUtil.getConfigFile("proteus");
        try {
            configFolder.delete();
        } catch (Exception ex) {
            JPanel panel = new JPanel();
            panel.setLayout(new GridLayout(2,1));
            panel.add(new JLabel("Cache could not be deleted"));
            if (ex instanceof NullPointerException) {
                panel.add(new JLabel("Reason: There was no cache folder. Maybe it was already deleted."));
            } else if (ex instanceof FileAlreadyLockedException) {
                panel.add(new JLabel("Reason: The cache was locked. Maybe it is opened by another program."));
            } else { // instanceof IOException
                panel.add(new JLabel("Reason: The Filesystem did not allow a deletion of the cache."));
            }
            NotifyDescriptor nd = new NotifyDescriptor(panel, "Cache not deleted",
                    NotifyDescriptor.OK_CANCEL_OPTION, NotifyDescriptor.INFORMATION_MESSAGE,
                    null, NotifyDescriptor.YES_OPTION);
            DialogDisplayer.getDefault().notify(nd);
        }
    }//GEN-LAST:event_deleteCacheButtonActionPerformed

    void load() {
        oldCacheFilesCheckBox.setSelected(Preferences.userRoot().getBoolean("check cache age", false));
        int i = Preferences.userRoot().getInt("cache time to live", 14);
        cacheFileMaxAgeTextField.setText(Integer.toString(i));
    }

    void store() {
        Preferences.userRoot().putBoolean("check cache age", oldCacheFilesCheckBox.isSelected());
        int i = Integer.parseInt(cacheFileMaxAgeTextField.getText());
        Preferences.userRoot().putInt("cache time to live", i);
    }

    boolean valid() {
        int i;
        try {
        i = Integer.parseInt(cacheFileMaxAgeTextField.getText());
        } catch (NumberFormatException ex) {
            errorMessageLabel.setText("Amount of days to keep cache files is not a number!");
            return false;
        }
        if (i < 0) {
            errorMessageLabel.setText("Amount of days to keep cache files is negative!");
            return false;
        }
        errorMessageLabel.setText("");
        return true;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel cacheAgeLabel;
    private javax.swing.JLabel cacheDeleteLabel;
    private javax.swing.JTextField cacheFileMaxAgeTextField;
    private javax.swing.JButton deleteCacheButton;
    private javax.swing.JLabel errorMessageLabel;
    private javax.swing.JCheckBox oldCacheFilesCheckBox;
    // End of variables declaration//GEN-END:variables

    @Override
    public void insertUpdate(DocumentEvent e) {
        updateTexts(e);
    }

    @Override
    public void removeUpdate(DocumentEvent e) {
        updateTexts(e);
    }

    @Override
    public void changedUpdate(DocumentEvent e) {
        updateTexts(e);
    }

    /**
     * Handles changes in the editable text fields
     */
    private void updateTexts(DocumentEvent e) {
//        if (e.getDocument() == cacheFileMaxAgeTextField.getDocument()) {
        controller.changed();
//        }
    }
}
