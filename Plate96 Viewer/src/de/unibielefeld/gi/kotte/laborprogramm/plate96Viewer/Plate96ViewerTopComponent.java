package de.unibielefeld.gi.kotte.laborprogramm.plate96Viewer;

import de.unibielefeld.gi.kotte.laborprogramm.picking.api.Picker;
import de.unibielefeld.gi.kotte.laborprogramm.picking.api.PickingRegistry;
import de.unibielefeld.gi.kotte.laborprogramm.project.api.IProteomicProject;
import de.unibielefeld.gi.kotte.laborprogramm.proteomik.api.gel.ISpot;
import de.unibielefeld.gi.kotte.laborprogramm.proteomik.api.plate384.IWell384;
import de.unibielefeld.gi.kotte.laborprogramm.proteomik.api.plate96.IPlate96;
import de.unibielefeld.gi.kotte.laborprogramm.proteomik.api.plate96.IWell96;
import de.unibielefeld.gi.kotte.laborprogramm.topComponentRegistry.api.IRegistryFactory;
import java.awt.BorderLayout;
import java.util.Iterator;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.util.Lookup.Result;
import org.openide.util.*;
import org.openide.util.lookup.AbstractLookup;
import org.openide.util.lookup.InstanceContent;
import org.openide.windows.Mode;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;

/**
 * Top component for the Plate96 Viewer.
 *
 * @author kotte
 */
@ConvertAsProperties(dtd = "-//de.unibielefeld.gi.kotte.laborprogramm.plateViewer//Plate96Viewer//EN",
autostore = false)
public final class Plate96ViewerTopComponent extends TopComponent implements LookupListener, Picker {

    private static Plate96ViewerTopComponent instance;
    /** path to the icon used by the component and its open action */
//    static final String ICON_PATH = "SET/PATH/TO/ICON/HERE";
    private static final String PREFERRED_ID = "Plate96ViewerComponent";
    private Result<IPlate96> result = null;
    private Result<ISpot> spotResult = null;
    private Result<IWell384> well384Result = null;
    private ISpot spot = null;
    private IWell384 well384 = null;
    private IWell96 well96 = null;
    private InstanceContent instanceContent = new InstanceContent();

    public Plate96ViewerTopComponent() {
        associateLookup(new AbstractLookup(instanceContent));
        result = Utilities.actionsGlobalContext().lookupResult(IPlate96.class);
        spotResult = Utilities.actionsGlobalContext().lookupResult(ISpot.class);
        well384Result = Utilities.actionsGlobalContext().lookupResult(IWell384.class);
        IProteomicProject project = Utilities.actionsGlobalContext().lookup(IProteomicProject.class);
        if(project==null) {
            throw new IllegalArgumentException("Instance of IProteomicProject must not be null!");
        }
        instanceContent.add(project);
        initComponents();
        setName(NbBundle.getMessage(Plate96ViewerTopComponent.class, "CTL_Plate96ViewerTopComponent"));
        setToolTipText(NbBundle.getMessage(Plate96ViewerTopComponent.class, "HINT_Plate96ViewerTopComponent"));
//        setIcon(ImageUtilities.loadImage(ICON_PATH, true));

        WindowManager mgr = WindowManager.getDefault();
        Mode mode = mgr.findMode("output"); //TODO "tools" returns null (this is where we REALLY want our window to be)
        mode.dockInto(this);
        resultChanged(new LookupEvent(result));
        resultChanged(new LookupEvent(spotResult));
        resultChanged(new LookupEvent(well384Result));
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToolBar1 = new javax.swing.JToolBar();
        autoAssignSpotsButton = new javax.swing.JToggleButton();
        jSeparator1 = new javax.swing.JToolBar.Separator();
        jButton1 = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JToolBar.Separator();
        jLabel1 = new javax.swing.JLabel();
        activeSpotLabel = new javax.swing.JLabel();

        setLayout(new java.awt.BorderLayout());

        jToolBar1.setRollover(true);

        org.openide.awt.Mnemonics.setLocalizedText(autoAssignSpotsButton, org.openide.util.NbBundle.getMessage(Plate96ViewerTopComponent.class, "Plate96ViewerTopComponent.autoAssignSpotsButton.text")); // NOI18N
        autoAssignSpotsButton.setToolTipText(org.openide.util.NbBundle.getMessage(Plate96ViewerTopComponent.class, "Plate96ViewerTopComponent.autoAssignSpotsButton.toolTipText")); // NOI18N
        autoAssignSpotsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                autoAssignSpotsButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(autoAssignSpotsButton);
        jToolBar1.add(jSeparator1);

        org.openide.awt.Mnemonics.setLocalizedText(jButton1, org.openide.util.NbBundle.getMessage(Plate96ViewerTopComponent.class, "Plate96ViewerTopComponent.jButton1.text")); // NOI18N
        jButton1.setFocusable(false);
        jButton1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton1);
        jToolBar1.add(jSeparator2);

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(Plate96ViewerTopComponent.class, "Plate96ViewerTopComponent.jLabel1.text")); // NOI18N
        jToolBar1.add(jLabel1);

        org.openide.awt.Mnemonics.setLocalizedText(activeSpotLabel, org.openide.util.NbBundle.getMessage(Plate96ViewerTopComponent.class, "Plate96ViewerTopComponent.activeSpotLabel.text")); // NOI18N
        jToolBar1.add(activeSpotLabel);

        add(jToolBar1, java.awt.BorderLayout.PAGE_START);
    }// </editor-fold>//GEN-END:initComponents

    private void autoAssignSpotsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_autoAssignSpotsButtonActionPerformed
        if (autoAssignSpotsButton.isSelected()) {
            PickingRegistry.register(this);
        } else {
            PickingRegistry.unregister(this);
        }
        platePanel.setAutoAssignSpots(autoAssignSpotsButton.isSelected());
    }//GEN-LAST:event_autoAssignSpotsButtonActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        platePanel.clear();
    }//GEN-LAST:event_jButton1ActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel activeSpotLabel;
    private javax.swing.JToggleButton autoAssignSpotsButton;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JToolBar.Separator jSeparator1;
    private javax.swing.JToolBar.Separator jSeparator2;
    private javax.swing.JToolBar jToolBar1;
    // End of variables declaration//GEN-END:variables
    private Plate96Panel platePanel;

    private void initPlateComponent(IPlate96 plate) {
        if (platePanel == null) {
//            remove(platePanel);
//        }
            instanceContent.add(plate);
            platePanel = new Plate96Panel(plate, instanceContent, getLookup());
            setDisplayName("96 Well Plate: " + plate.getName());
            add(platePanel, BorderLayout.CENTER);
//            CentralLookup.getDefault().remove(plate);
        }
    }

    @Override
    public int getPersistenceType() {
        return TopComponent.PERSISTENCE_NEVER;
    }

    @Override
    public void componentOpened() {
        IPlate96 plate = Utilities.actionsGlobalContext().lookup(IPlate96.class);
        if (plate != null) {
            initPlateComponent(plate);
        }

        if (result != null) {
            result.addLookupListener(this);
        }
        if (spotResult != null) {
            spotResult.addLookupListener(this);
        }
        if (well384Result != null) {
            well384Result.addLookupListener(this);
        }
    }

    @Override
    public void componentClosed() {
        if (result != null) {
            result.removeLookupListener(this);
        }
        if (spotResult != null) {
            spotResult.removeLookupListener(this);
        }
        if (well384Result != null) {
            well384Result.removeLookupListener(this);
        }
        IPlate96 plate = getLookup().lookup(IPlate96.class);
        if (plate != null) {
            Lookup.getDefault().lookup(IRegistryFactory.class).getDefault().closeTopComponent(plate);
//            CentralLookup.getDefault().remove(plate);
        }
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
    }

    Object readProperties(java.util.Properties p) {
        if (instance == null) {
            instance = this;
        }
        instance.readPropertiesImpl(p);
        return instance;
    }

    private void readPropertiesImpl(java.util.Properties p) {
        String version = p.getProperty("version");
    }

    @Override
    protected String preferredID() {
        return PREFERRED_ID;
    }

    @Override
    public void resultChanged(LookupEvent ev) {
        //set plate
        Iterator<? extends IPlate96> instances = result.allInstances().iterator();
        if (instances.hasNext()) {
            initPlateComponent(instances.next());
        }

        Iterator<? extends ISpot> spotInstances = spotResult.allInstances().iterator();
        if (spotInstances.hasNext()) {
            ISpot spotInstance = spotInstances.next();
            if (spotInstance != this.spot) {

                activeSpotLabel.setText(String.format("# %d @Gel %s", spotInstance.getNumber(), spotInstance.getGel().getName()));
                if (this.spot != null) {
                    instanceContent.remove(this.spot);
                }
                this.spot = spotInstance;
                if (this.well96 != null) {
                    instanceContent.remove(this.well96);
                }
                this.well96 = platePanel.setSpot(this.spot);
                if (this.well96 != null) {
                    instanceContent.add(this.well96);
                }
                instanceContent.add(this.spot);
            }
        }

        Iterator<? extends IWell384> well384Instances = well384Result.allInstances().iterator();
        if (well384Instances.hasNext()) {
            IWell384 well384Instance = well384Instances.next();
            if (well384Instance != this.well384) {
                this.well384 = well384Instance;
                platePanel.setWell384(this.well384);
            }
        }
    }

    @Override
    public void resetPicking() {
        autoAssignSpotsButton.setSelected(false);
        platePanel.setAutoAssignSpots(false);
    }
}
