package de.unibielefeld.gi.kotte.laborprogramm.pathway.sbml;

import de.unibielefeld.gi.kotte.laborprogramm.pathway.project.api.IPathwayProject;
import java.awt.BorderLayout;
import javax.swing.SwingUtilities;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.util.LookupEvent;
import org.openide.util.LookupListener;
import org.openide.util.NbBundle.Messages;
import org.openide.windows.TopComponent;
import org.sbml.jsbml.SBMLDocument;

/**
 * Top component which displays pathways represented as SBML documents.
 *
 * @author kotte
 */
@ConvertAsProperties(
    dtd = "-//de.unibielefeld.gi.kotte.laborprogramm.pathways.visualization//PathwayExplorer//EN",
autostore = false)
@TopComponent.Description(
    preferredID = "PathwayExplorerTopComponent",
//iconBase="SET/PATH/TO/ICON/HERE", 
persistenceType = TopComponent.PERSISTENCE_NEVER)
@TopComponent.Registration(mode = "properties", openAtStartup = false)
@ActionID(category = "Window", id = "de.unibielefeld.gi.kotte.laborprogramm.pathways.visualization.PathwayExplorerTopComponent")
@TopComponent.OpenActionRegistration(
    displayName = "#CTL_PathwayExplorerAction",
preferredID = "PathwayExplorerTopComponent")
@Messages({
    "CTL_PathwayExplorerAction=Pathway Explorer",
    "CTL_PathwayExplorerTopComponent=Pathway Explorer",
    "HINT_PathwayExplorerTopComponent=This is a Pathway Explorer Window"
})
public final class PathwayExplorerTopComponent extends TopComponent implements LookupListener {

    private boolean initialized = false;

    public PathwayExplorerTopComponent() {
        initComponents();
        setName(Bundle.CTL_PathwayExplorerTopComponent());
        setToolTipText(Bundle.HINT_PathwayExplorerTopComponent());
    }

    public void openProject(final IPathwayProject project) {
        if (!initialized) {
            SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                PathwayDisplay display = new PathwayDisplay(project);
                setDisplayName("Pathway Explorer of project " + project.getName());
                setToolTipText("Model Id: "+project.getDocument().getSBMLDocument().getModel().getId());
                open();
                add(display, BorderLayout.CENTER);
                requestActive();
                initialized = true;
            }
        });
        }else {
            throw new IllegalStateException("Pathway Explorer was already initialized with an SBML File!");
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setLayout(new java.awt.BorderLayout());
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
//        SBMLDocument document = Utilities.actionsGlobalContext().lookup(SBMLDocument.class);
//        if(document==null) {
//            throw new IllegalArgumentException("Instance of SBMLDocument must not be null!");
//        }
//        initPathwayDisplay(document);
    }

    @Override
    public void componentClosed() {
//        SBMLDocument doc = getLookup().lookup(SBMLDocument.class);
//        if (doc != null) {
//            Lookup.getDefault().lookup(IRegistryFactory.class).getDefault().closeTopComponentsFor(doc);
//        }
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    @Override
    public void resultChanged(LookupEvent le) {
        throw new UnsupportedOperationException("Not supported yet.");
    }
}
