package de.unibielefeld.gi.kotte.laborprogramm.pathways.sbml;

import java.io.File;
import java.io.IOException;
import javax.xml.stream.XMLStreamException;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.Exceptions;
import org.openide.util.LookupEvent;
import org.openide.util.LookupListener;
import org.openide.util.NbBundle.Messages;
import org.openide.windows.TopComponent;
import org.sbml.jsbml.SBMLDocument;
import org.sbml.jsbml.xml.stax.SBMLReader;

/**
 * Top component which displays pathways represented as SBML documents.
 * 
 * @author kotte
 */
@ConvertAsProperties(
    dtd = "-//de.unibielefeld.gi.kotte.laborprogramm.pathways.visualization//PathwayExplorer//EN",
autostore = false)
@TopComponent.Description(
    preferredID = "PathwayExplorerTopComponent",
//iconBase="SET/PATH/TO/ICON/HERE", 
persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "properties", openAtStartup = false)
@ActionID(category = "Window", id = "de.unibielefeld.gi.kotte.laborprogramm.pathways.visualization.PathwayExplorerTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
    displayName = "#CTL_PathwayExplorerAction",
preferredID = "PathwayExplorerTopComponent")
@Messages({
    "CTL_PathwayExplorerAction=Pathway Explorer",
    "CTL_PathwayExplorerTopComponent=Pathway Explorer",
    "HINT_PathwayExplorerTopComponent=This is a Pathway Explorer Window"
})
public final class PathwayExplorerTopComponent extends TopComponent implements LookupListener{

    public PathwayExplorerTopComponent() {
        initComponents();
        setName(Bundle.CTL_PathwayExplorerTopComponent());
        setToolTipText(Bundle.HINT_PathwayExplorerTopComponent());
    }
    
    public void openFile(File file) {
        SBMLReader reader = new SBMLReader();
        SBMLDocument document = null;
        try {
            document = reader.readSBML(file);
        } catch (IOException ex) {
            Exceptions.printStackTrace(ex);
        } catch (XMLStreamException ex) {
            Exceptions.printStackTrace(ex);
        }
        if (document != null) {
            initPathwayDisplay(document);
        }
    }
    
    private void initPathwayDisplay(SBMLDocument document) {
        frame.setVisible(false);
        frame.removeAll();
        frame.getContentPane().add(new PathwayDisplay(document));
        frame.pack();
        frame.setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        frame = new javax.swing.JFrame();

        javax.swing.GroupLayout frameLayout = new javax.swing.GroupLayout(frame.getContentPane());
        frame.getContentPane().setLayout(frameLayout);
        frameLayout.setHorizontalGroup(
            frameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        frameLayout.setVerticalGroup(
            frameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFrame frame;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
//        SBMLDocument document = Utilities.actionsGlobalContext().lookup(SBMLDocument.class);
//        if(document==null) {
//            throw new IllegalArgumentException("Instance of SBMLDocument must not be null!");
//        }
//        initPathwayDisplay(document);
    }

    @Override
    public void componentClosed() {
//        SBMLDocument doc = getLookup().lookup(SBMLDocument.class);
//        if (doc != null) {
//            Lookup.getDefault().lookup(IRegistryFactory.class).getDefault().closeTopComponentsFor(doc);
//        }
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    @Override
    public void resultChanged(LookupEvent le) {
        throw new UnsupportedOperationException("Not supported yet.");
    }
}
